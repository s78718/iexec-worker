import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'eclipse'
    id 'maven'
    id 'jacoco'
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.sonarqube' version '2.7'
    id 'com.palantir.docker' version '0.25.0'
}

group = 'com.iexec.worker'
sourceCompatibility = 11
targetCompatibility = 11

sourceSets {
    // integration tests
    itest {
        java {
            srcDir file('src/itest/java')
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources {
            srcDir file('src/itest/resources')
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://nexus.iex.ec/repository/maven-public/"
    }
    maven {
        url "https://jitpack.io"
    }
}

configurations {
    itestImplementation.extendsFrom testImplementation
    itestRuntimeOnly.extendsFrom testRuntimeOnly
    itestAnnotationProcessor.extendsFrom testAnnotationProcessor
    deployerJars
}


ext {
    springCloudVersion = '2020.0.1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // iexec
    // compile "com.iexec.common:iexec-common:$iexecCommonVersion"
    compile files("../iexec-common/build/libs/iexec-common-${iexecCommonVersion}.jar")

    // spring
    compile("org.springframework.boot:spring-boot-starter") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging' //required for Graylog
    }
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-websocket"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.cloud:spring-cloud-starter"
    compile "org.springframework.cloud:spring-cloud-starter-openfeign"
    compile "org.springframework.retry:spring-retry"
    testCompile "org.springframework.boot:spring-boot-starter-test"

    // Web3j issues, see core build.gradle
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50'

    // docker
    implementation 'com.github.docker-java:docker-java:3.2.5'
    implementation 'com.github.docker-java:docker-java-transport-httpclient5:3.2.5'

    compile 'org.glassfish.jersey.inject:jersey-hk2:2.26'
    compile 'org.glassfish.jersey.bundles.repackaged:jersey-guava:2.25.1'
    compile 'javax.activation:activation:1.1.1'

    // Removes 'warning: unknown enum constant When.MAYBE'
    compile 'com.google.code.findbugs:annotations:3.0.1'

    //graylog
    compile 'biz.paluch.logging:logstash-gelf:1.5.1'

    // lombok
    compileOnly "org.projectlombok:lombok:1.18.2"
    annotationProcessor "org.projectlombok:lombok:1.18.2"

    // package cloud
    deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"
}

test {
    // Ignore slow tests in development
    if (project.hasProperty('dev')) {
        exclude '**/StompClientTests.class'
    }
}

jacoco {
    toolVersion = "0.8.3"
}
// the test coverage report will be created just before the build
build.dependsOn jacocoTestReport

task createVersion(type: Copy) {
    // delete old one
    delete 'src/main/java/com/iexec/worker/utils/version/Version.java'
    // use and copy template to the new location
    from 'src/main/resources/Version.java.template'
    into 'src/main/java/com/iexec/worker/utils/version/'

    rename { String fileName ->
        fileName.replace('.template', '')
    }
    // replace tokens in the template file
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}
// the createVersion task should be called before compileJava or the version service will not work
compileJava.dependsOn createVersion

// ##################
// #    artifact    #
// ##################

def gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
def isMasterBranch = gitBranch == "master"
def isDevelopBranch = gitBranch == "develop"
def canPush = (isMasterBranch || isDevelopBranch ) &&
        project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")
def gitShortCommit = 'git rev-parse --short HEAD'.execute().text.trim()
def isSnapshotVersion = project.version.contains("SNAPSHOT")

project.ext.getNexusMaven = {
    def nexusMavenBase = "https://nexus.iex.ec/repository"
    if (isSnapshotVersion) {
        return nexusMavenBase + "/maven-snapshots/"
    } else {
        return nexusMavenBase + "/maven-releases/"
    }
}

uploadArchives {
    enabled canPush
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: getNexusMaven()) {
            authentication(userName: project.nexusUser, password: project.nexusPassword)
        }
    }
}

def canBuildImage = (isMasterBranch || isDevelopBranch ) ||
        project.hasProperty("forceDockerBuild")
def imageName = "nexus.iex.ec/iexec-worker"
def buildDir = 'build/libs/'
def jarName = 'iexec-worker.jar'
def jarPath = buildDir + jarName

task copyJar(type: Copy) {
    from(buildDir + tasks.jar.archiveFile.get().asFile.getName())
    into(buildDir)
    rename { filename ->
        filename.replace tasks.jar.archiveFile.get().asFile.getName(), jarName
    }
}
build.dependsOn copyJar

// ##################
// #     docker     #
// ##################

project.ext.getDockerImageNameFull = {
    def imageNameWithVersion = imageName + ":${version}"
    return isSnapshotVersion
            ? imageNameWithVersion + "-" + gitShortCommit
            : imageNameWithVersion
}

project.ext.getDockerImageNameShortCommit = {
    return imageName + ":" + gitShortCommit
}

docker {
    name getDockerImageNameFull()
    tags 'dev'
    dockerfile file('Dockerfile')
    files jarPath
    // buildArgs([JAR_PATH: jarPath ])
}
tasks.docker.enabled = canBuildImage

task buildImage {
    enabled = canBuildImage
    dependsOn tasks.docker
    dependsOn tasks.dockerTag
}

task pushImage(type: Exec) {
    enabled canPush
    commandLine "sh", "-c",
            "docker login -u $project.nexusUser -p $project.nexusPassword nexus.iex.ec && " +
            "docker push ${getDockerImageNameFull()} && " +
            "docker tag ${getDockerImageNameFull()} ${getDockerImageNameShortCommit()} && " +
            "docker push ${getDockerImageNameShortCommit()} && " +
            "docker logout"
    dependsOn tasks.buildImage
}

task itest(type:Test) {
    description = "Run integration tests (src/itest/...)."
    // enabled isDev
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
    outputs.upToDateWhen { false } // run always
    useJUnitPlatform()
}

// ##################
// #     proxy     #
// ##################

//gradle bootRun -PproxyHost=192.168.XX.XXX -PproxyPort=3128
project.ext.getJvmArgs = {
    if (project.hasProperty("proxyHost") && project.hasProperty("proxyPort")) {
        return ["-Dhttp.proxyHost="+project.proxyHost, "-Dhttp.proxyPort="+project.proxyPort]
    } else {
        return  []
    }
}

bootRun {
    jvmArgs = project.ext.getJvmArgs()
}
